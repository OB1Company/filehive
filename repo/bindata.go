// Code generated by go-bindata.
// sources:
// sample-filehive.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleFilehiveConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xc1\x8a\xd4\x40\x10\x86\xef\x79\x8a\xff\x01\x42\x76\xd6\x01\x5d\x66\xc8\x41\xf0\xb2\xa7\x15\x56\xc4\x6b\x27\x5d\x49\x0a\x3a\x5d\xb3\x5d\x95\x89\x83\xe8\xb3\x4b\x27\x93\xd1\x55\x04\x99\xcb\x34\xfd\x7f\x5f\xff\x55\x39\xe2\xd3\x40\xf0\x9c\xa8\x35\x49\x17\x98\x40\x4d\x12\xc1\x3b\x73\xd0\xa9\x1d\xe0\x14\x36\x10\x3a\x0e\x34\xf0\x79\xbd\x69\x9c\x52\x55\x5c\x61\xea\xdc\x14\x0c\xac\xf8\x71\x57\xdd\x62\x12\xf1\xf1\xe9\xf9\xf1\x0b\x9e\x9e\x49\xab\xa2\x38\xe2\x03\x35\x53\x8f\x20\x7d\xcf\xb1\x47\xa0\x33\x85\xec\xf8\xec\x02\xfb\xf5\xa8\x70\x89\xf0\xcd\xe7\x60\x09\x8e\x9d\x94\x88\x62\xdc\x52\x89\xd9\xa5\xc8\xb1\x2f\x41\x29\x49\x2a\xd1\x26\x36\x6e\x5d\xf8\x5e\x1c\xb3\x73\xe1\xeb\x8c\x14\xc5\x3f\x87\x0a\xd2\x2f\x73\xe8\xca\x78\x4e\xf5\x6f\x95\xef\x82\xf4\x9a\xe9\xf7\xaf\xd9\x49\x69\x51\xb8\x33\x41\xcd\x19\xb7\xab\xe4\xb6\x1e\x1e\x5d\x4f\x9a\x33\x2e\x7a\x28\xa5\x33\xa5\xbc\xb3\x11\x5d\x92\x31\xcf\xb8\x62\x99\xfa\xf3\xcd\x79\x9e\x6f\x85\x65\x74\x1c\x97\x65\x5f\x1d\x33\x87\x80\x34\x45\x48\x2c\x8e\xd7\xfb\x9a\xbe\xba\xf1\x14\xa8\x6a\x65\xdc\x48\x8e\x46\xa9\x73\x2d\x1d\x4e\x92\x0c\x9d\x2c\xcf\x63\xa6\xe6\xd6\x46\xd0\x70\xf4\x30\xc9\x75\x02\xab\x51\xac\x77\xd5\xf2\x3b\x3c\xec\x1e\x76\xab\x8a\x35\x7f\xc6\xcc\xfa\x06\x76\x39\x51\x85\x47\x43\xeb\x22\x88\x6d\xa0\x84\x86\xa0\x2f\x81\x8d\xf6\x25\xc6\x8b\xbe\x84\x12\x92\x70\x12\xb5\x3e\x91\x6a\x96\xfb\xc6\xb3\x0b\xd4\x5a\xbd\x04\xb6\x8e\x83\xa8\x6d\xf2\xfc\xff\x75\xd5\x25\x8a\xeb\xe1\xa6\xbb\xb6\x5f\xad\x19\xaa\xef\xdf\xbc\x5b\x4a\xdf\x1f\xf6\xfb\xdd\xdb\xcd\x3d\x29\xa5\xe8\x46\xfa\x5b\xf7\x4b\xe5\x9b\x55\x93\xb3\xf5\x06\x6c\x82\x93\x53\x9d\x25\xf9\xff\x11\xe4\x6c\xbd\x01\xc5\xcf\x00\x00\x00\xff\xff\xf2\x61\x9c\x90\x41\x03\x00\x00")

func sampleFilehiveConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleFilehiveConf,
		"sample-filehive.conf",
	)
}

func sampleFilehiveConf() (*asset, error) {
	bytes, err := sampleFilehiveConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-filehive.conf", size: 833, mode: os.FileMode(420), modTime: time.Unix(1605135151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-filehive.conf": sampleFilehiveConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-filehive.conf": &bintree{sampleFilehiveConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
