// Code generated by go-bindata.
// sources:
// sample-filehive.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleFilehiveConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x8a\xd4\x40\x10\x86\xef\x79\x8a\xff\x01\x42\x76\xd6\x01\x5d\x66\xc8\xcd\xcb\x9e\x56\x58\x11\xaf\x9d\x74\x25\x29\xe8\xed\x9a\xad\xaa\xcc\x30\x88\x3e\xbb\x74\x32\x59\x15\x11\x24\x97\x14\xfd\x7f\x1f\x7f\xd5\x11\x9f\x27\x42\x64\xa5\xde\x45\xaf\x70\x81\xb9\x28\x21\x06\x0f\xb0\xb9\x9f\x10\x0c\x3e\x11\x06\x4e\x34\xf1\x79\x7d\xe9\x82\x51\x53\xdd\x60\x1a\xc2\x9c\x1c\x6c\xf8\x71\xd7\xbc\xc5\x24\xe3\xd3\xd3\xf3\xe3\x57\x3c\x3d\x93\x35\x55\x75\xc4\x47\xea\xe6\x11\x49\xc6\x91\xf3\x88\x44\x67\x4a\xc5\xf1\x25\x24\x8e\xeb\x68\x08\x4a\xf8\x16\x4b\xb0\x06\xe7\x41\x6a\x64\x71\xee\xa9\xc6\x25\x68\xe6\x3c\xd6\x20\x55\xd1\x1a\xbd\xb2\x73\x1f\xd2\xf7\xea\x58\x9c\x0b\xdf\x16\xa4\xaa\xfe\xb9\x54\x92\x71\xd9\xc3\x56\x26\xb2\xb6\xbf\x55\xbe\x4b\x32\xda\x46\x73\x76\xd2\x21\xf4\x74\x38\x89\x3a\x06\xd1\xe5\x0a\x17\xea\x60\xa4\x67\xd2\x62\xed\x38\x47\xb8\x94\x2d\x76\xcd\xf2\x1d\x1e\x76\x0f\xbb\xd5\xc1\x56\x4e\x52\xa0\xd8\xc1\xaf\x27\x6a\xf0\xe8\xe8\x43\x06\xb1\x4f\xa4\xe8\x08\xf6\x9a\xd8\x69\x5f\xe3\xe5\x6a\xaf\xa9\x86\x28\x4e\x62\x3e\x2a\x99\x15\x6b\xec\x22\x87\x44\xbd\xb7\x4b\x60\x2b\x37\x89\xf9\x26\x2f\xff\x7f\x76\x5c\xa2\xb8\x0d\x6f\xba\x5b\xed\xd5\x5a\xa0\xf6\xfe\xdd\x87\xa5\xf4\xfd\x61\xbf\xdf\xbd\xdf\xdc\xb3\x91\xe6\xf0\x42\x7f\xeb\x7e\xa9\x62\xb7\x6a\x4a\xb6\xdd\x80\x4d\x70\x0a\x66\x17\xd1\xf8\x3f\x82\x92\x6d\x37\xa0\xfa\x19\x00\x00\xff\xff\xc4\x8a\x12\x6e\x8d\x02\x00\x00")

func sampleFilehiveConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleFilehiveConf,
		"sample-filehive.conf",
	)
}

func sampleFilehiveConf() (*asset, error) {
	bytes, err := sampleFilehiveConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-filehive.conf", size: 653, mode: os.FileMode(420), modTime: time.Unix(1605028692, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-filehive.conf": sampleFilehiveConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-filehive.conf": &bintree{sampleFilehiveConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
